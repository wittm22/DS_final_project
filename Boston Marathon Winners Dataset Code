import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn; seaborn.set()

#convert 'string' values of men's marathon winning times into 'timedelta' objects
from datetime import datetime, timedelta

def convert_time(s):
    h, m, s = map(int, s.split(':'))
    return timedelta(hours=h, minutes=m, seconds=s)

mens_data = pd.read_csv('Mens_Boston_Marathon_Winners.csv',
                   converters={'Time':convert_time})
mens_data.head() #attributes of first five rows

#convert times into an 'int' object. 'Time_hours' represents the men's finishing times in hours.
mens_data['Time_hours'] = mens_data['Time'].astype(int) / 1E9 * (1/3600)
mens_data.head() 

mens_year = mens_data['Year']
mens_time = mens_data['Time_hours']

plt.scatter(mens_year, mens_time); #scatterplot of men's marathon times from 1897 to 2023
plt.xlabel('Year')
plt.ylabel('Finish Time (Hours)')
plt.title("Men's Boston Marathon Winning Finishing Times (1897-2023)")
plt.show()


#prints scatterplot with line of best fit
from sklearn.linear_model import LinearRegression
mens_model = LinearRegression(fit_intercept = True)
mens_model.fit(mens_year[:, np.newaxis], mens_time)
mens_xfit = np.linspace(1897, 2023)
mens_yfit = mens_model.predict(mens_xfit[:, np.newaxis])

plt.scatter(mens_year, mens_time)
plt.plot(mens_xfit, mens_yfit)
plt.xlabel("Year")
plt.ylabel("Finish Time (Hours)")
plt.title("Men's Boston Marathon Winners Finishing Times (1897 - 2023)")

print("Model slope: ", mens_model.coef_[0], "hours")
print("Model intercept: ", mens_model.intercept_, "hours")
print("Line of Best Fit Equation: y =", mens_model.coef_[0], "* x +", mens_model.intercept_)



#convert 'string' values of women's marathon winning times into 'timedelta' objects
womens_data = pd.read_csv('Womens_Boston_Marathon_Winners.csv',
                   converters={'Time':convert_time})
womens_data.head()

#convert times into an 'int' object. 'Time_hours_womens' represents the women's finishing times in hours.
womens_data['Time_hours_womens'] = womens_data['Time'].astype(int) / 1E9 * (1/3600)
womens_data.head()

year_womens = womens_data['Year']
time_hours_womens = womens_data['Time_hours_womens']
plt.scatter(year_womens, time_hours_womens) #scatterplot of women's marathon times from 1897 to 2023
plt.show() 

#prints scatterplot with line of best fit
model_womens = LinearRegression(fit_intercept = True)
model_womens.fit(year_womens[:, np.newaxis], time_hours_womens)
xfit_womens = np.linspace(1966, 2023)
yfit_womens = model.predict(xfit_womens[:, np.newaxis])
plt.scatter(year_womens, time_hours_womens)
plt.xlabel('Year')
plt.ylabel('Finish Time (Hours)')
plt.title("Women's Boston Marathon Winners Finishing Times (1966 - 2023)")
plt.plot(xfit_womens, yfit_womens)
plt.show()

print("Model slope: ", model_womens.coef_[0], "hours") #prints slope of line of best fit
print("Model intercept: ", model_womens.intercept_, "hours") #prints y-intercept of line of best fit
print("Line of Best Fit Equation: y =", model_womens.coef_[0], "* x +", model_womens.intercept_) #prints line of best fit equation

'''
In order to better compare men's winning times and women's winning times, the following code only takes men's winning times starting at 1966, the same year the women's race began
'''
#scatterplot with line of best fit of men's winning times from 1966 to 2023
mens_model_1966present = LinearRegression(fit_intercept = True)
mens_model_1966present.fit(mens_year_1966present[:, np.newaxis], mens_time_1966present)
mens_1966_xfit = np.linspace(1966, 2023)
mens_1966_yfit = mens_model_1966present.predict(mens_1966_xfit[:, np.newaxis])
plt.scatter(mens_year_1966present, mens_time_1966present)
plt.plot(mens_1966_xfit, mens_1966_yfit)
plt.xlabel("Year")
plt.ylabel("Finish Time (Hours)")
plt.title("Men's Boston Marathon Winners Finishing Times (1966 - 2023)");
plt.show()

print("Model slope: ", mens_model_1966present.coef_[0], "hours") #slope
print("Model intercept: ", mens_model_1966present.intercept_, "hours") #y-intercept
print("Line of Best Fit Equation: y =", mens_model_1966present.coef_[0], "* x +", mens_model_1966present.intercept_) #line of best flit
